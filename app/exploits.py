import os
import flask
import shutil

import db
import settings

# Helper functions
def load_exploits():
    for exploit in os.listdir(settings.EXPLOITS_DIR):
        if exploit != "templates" and exploit != "archive":
            id = next(db.id_iter)
            name = exploit
            db.data["exploits"][id] = {
                "id": id,
                "name": name,
                "frequency": settings.EXPLOIT_DEFAULT_FREQUENCY,
                "path": name,
                "flags_captured": 0,
                "boxes_vulnerable": 0,
            }

def get_file_contents(filename):
    # Get the contents of a template file
    with open(os.path.join(filename), "r") as f:
        return f.read()

def get_exploit_templates():
    return os.listdir(settings.EXPLOITS_TEMPLATES_DIR)

def get_archived_exploits():
    return os.listdir(settings.EXPLOITS_ARCHIVE_DIR)

def run_exploit(id, target_ip):
    exploit = db.data["exploits"][id]
    exploit_path = os.path.join(settings.EXPLOITS_DIR, exploit["path"])
    os.system("chmod +x " + exploit_path)
    output = os.system(exploit_path + " " + target_ip)
    print(output)



# Frontend views
def view_exploits():
    exploits = db.data["exploits"]
    return flask.render_template("exploits/index.html", exploits=exploits)

def view_archived_exploits():
    exploits = get_archived_exploits()
    return flask.render_template("exploits/archived.html", exploits=exploits)

def view_new_exploit():
    template = flask.request.args.get("template")
    templates = get_exploit_templates()
    if template:
        code = get_file_contents(os.path.join(settings.EXPLOITS_TEMPLATES_DIR, template))
        return flask.render_template("exploits/new.html", templates = templates, code = code, messages = ["Loaded template " + template])
    else:
        return flask.render_template("exploits/new.html", templates = templates, code = "")

def view_modify_exploit():
    id = int(flask.request.args.get("id"))
    try:
        exploit = db.data["exploits"][id]
        code = get_file_contents(os.path.join(settings.EXPLOITS_DIR, exploit["path"]))
        return flask.render_template("exploits/modify.html", exploit = exploit, code = code)
    except KeyError:
        return flask.render_template("404.html")


# Backened functions
def create_exploit():
    name = flask.request.form.get("name")
    code = flask.request.form.get("code")
    frequency = flask.request.form.get("frequency")

    name = name.strip('.').strip('/')

    id = next(db.id_iter)

    path = name

    # Check if the exploit already exists
    if os.path.exists(os.path.join(settings.EXPLOITS_DIR, path)):
        exists_counter = 1
        while os.path.exists(os.path.join(settings.EXPLOITS_DIR, path + "_" + str(exists_counter))):
            exists_counter += 1
        path = path + "_" + str(exists_counter)

    db.data["exploits"][id] = {"id": id, "name": name, "frequency": frequency, "path": path}

    with open(os.path.join(settings.EXPLOITS_DIR, path), "w") as f:
        f.write(code)

    return flask.redirect("/exploits")

def update_exploit():
    name = flask.request.form.get("name")
    code = flask.request.form.get("code")
    frequency = flask.request.form.get("frequency")
    id = int(flask.request.form.get("id"))

    old_path = db.data["exploits"][id]["path"]
    path = name

    if old_path != path:
    # Check if the exploit already exists
        if os.path.exists(os.path.join(settings.EXPLOITS_DIR, path)):
            exists_counter = 1
            while os.path.exists(os.path.join(settings.EXPLOITS_DIR, path + "_" + str(exists_counter))):
                exists_counter += 1
            path = path + "_" + str(exists_counter)

    # Delete the old file
    os.remove(os.path.join(settings.EXPLOITS_DIR, old_path))
    # Write the new file
    with open(os.path.join(settings.EXPLOITS_DIR, path), "w") as f:
        f.write(code)

    db.data["exploits"][id]["name"] = name
    db.data["exploits"][id]["frequency"] = frequency
    db.data["exploits"][id]["path"] = path


    return flask.redirect("/exploits")

def archive_exploit():
    id = int(flask.request.args.get("id"))

    try:
        path = db.data["exploits"][id]["path"]
    except KeyError:
        return flask.render_template("404.html")

    shutil.move(os.path.join(settings.EXPLOITS_DIR, path), os.path.join(settings.EXPLOITS_ARCHIVE_DIR, path))
    
    del db.data["exploits"][id]

    return flask.redirect("/exploits")


def unarchive_exploit():
    name = flask.request.args.get("name")

    try:
        id = next(db.id_iter)
        path = name
        shutil.move(os.path.join(settings.EXPLOITS_ARCHIVE_DIR, name), os.path.join(settings.EXPLOITS_DIR, path))
        db.data["exploits"][id] = {
            "id": id,
            "name": path,
            "frequency": settings.EXPLOIT_DEFAULT_FREQUENCY,
            "path": path,
            "flags_captured": 0,
            "boxes_vulnerable": 0,
        }
    except Exception:
        return flask.render_template("404.html")

    return flask.redirect("/exploits")

def delete_exploit():
    name = flask.request.args.get("name")

    try:
        os.remove(os.path.join(settings.EXPLOITS_ARCHIVE_DIR, name))
    except Exception:
        return flask.render_template("404.html")

    return flask.redirect("/exploits/archived")